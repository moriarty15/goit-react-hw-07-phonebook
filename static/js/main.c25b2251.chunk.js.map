{"version":3,"sources":["components/Container.module.css","DBworker/fetchRequest.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","redux/contacts/contacts-selector.js","components/ContactList/ContactList.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-types.js","components/Filter/Filter.js","components/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchRequest","a","fetch","data","json","alert","postContact","name","number","method","body","JSON","stringify","Phone","headers","responce","deleteContact","id","fetchContactsAsyncThunk","createAsyncThunk","contacts","reverse","addContactAsyncThunk","contact","deleteContactAsyncThunk","ContactForm","useState","setName","setNumber","state","useSelector","items","dispatch","useDispatch","handleAllInputChange","e","currentTarget","value","reset","className","onSubmit","preventDefault","trim","some","item","includes","onChange","type","pattern","title","required","placeholder","ContactListItem","props","onClick","getVisibleContacts","getContacts","filter","getFilter","normalizeFilter","toLowerCase","ContactList","useEffect","length","map","handleFilterChange","createAction","Filter","target","Container","children","s","container","App","itemsReducer","createReducer","fulfilled","_","action","payload","filterReducer","combineReducers","store","configureStore","reducer","contactsReducer","reactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.c25b2251.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2cgmQ\",\"title\":\"Container_title__3k-Bn\"};","export async function fetchRequest() {\r\n  try {\r\n    const data = await fetch(\r\n      \"https://61984aee164fa60017c22ff5.mockapi.io/contacts/contacts\"\r\n    );\r\n    const json = await data.json();\r\n    return json;\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n}\r\n\r\nexport async function postContact({ name, number }) {\r\n  try {\r\n    const data = await fetch(\r\n      \"https://61984aee164fa60017c22ff5.mockapi.io/contacts/contacts\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          Phone: number,\r\n          name,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    const responce = await data.json();\r\n    return responce;\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n}\r\n\r\nexport async function deleteContact(id) {\r\n  try {\r\n    const data = await fetch(\r\n      `https://61984aee164fa60017c22ff5.mockapi.io/contacts/contacts/${id}`,\r\n      {\r\n        method: \"DELETE\",\r\n      }\r\n      );\r\n      return data;\r\n  } catch (error) {\r\n    alert(error);\r\n  }\r\n}\r\n","import { fetchRequest, postContact, deleteContact } from \"../../DBworker/fetchRequest\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n// import { fetchContactsSuccess, fetchContactsRequest, fetchContactsError } from \"./contacts-actions\";\r\n\r\nexport const fetchContactsAsyncThunk = createAsyncThunk(\r\n  \"contacts/fetchContacts\",\r\n  async () => {\r\n    try {\r\n      const contacts = await fetchRequest();\r\n      return contacts.reverse();\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const addContactAsyncThunk = createAsyncThunk(\r\n  \"contacts/addContact\",\r\n    async (data) => {\r\n        try {\r\n      const contact = await postContact(data);\r\n      return contact;\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContactAsyncThunk = createAsyncThunk(\r\n    \"contact/deleteContact\",\r\n    async (id) => {\r\n        try {\r\n            await deleteContact(id);\r\n            return id;\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n)\r\n\r\n// const fetchContacts = () => async dispatch => {\r\n//     dispatch(fetchContactsRequest())\r\n\r\n//     try {\r\n//         const contacts = await fetchRequest();\r\n//         console.log(contacts)\r\n//         dispatch(fetchContactsSuccess(contacts))\r\n\r\n//     } catch (error) {\r\n//         dispatch(fetchContactsError(error))\r\n//     }\r\n\r\n// }\r\n// export default fetchContacts;\r\n","import { useState } from \"react\";\r\nimport \"./ContactForm.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { addContact } from \"../../redux/contacts/contacts-actions\";\r\nimport { addContactAsyncThunk } from \"../../redux/contacts/contacts-operations\";\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const state = useSelector((state) => state.contacts.items);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAllInputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // функция записи новых абонентов в телефонную книгу\r\n  const handlePushContact = (e) => {\r\n    e.preventDefault();\r\n    if (name.trim() === \"\") return;\r\n    if (state.some((item) => item.name.includes(name))) {\r\n      alert(`${name} уже есть в списке контактов`);\r\n      setNumber(\"\");\r\n      setName(\"\");\r\n      return;\r\n    }\r\n\r\n    dispatch(addContactAsyncThunk({ name, number }));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setNumber(\"\");\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"form__container\">\r\n      <form onSubmit={handlePushContact}>\r\n        <label className=\"label\">\r\n          Name\r\n          <input\r\n            className=\"input\"\r\n            value={name}\r\n            onChange={handleAllInputChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            placeholder=\"Enter Name\"\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Number\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={handleAllInputChange}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            placeholder=\"Enter Number\"\r\n          />\r\n        </label>\r\n        <button className=\"add__button\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types'\r\nimport { useDispatch} from \"react-redux\";\r\n// import { deleteContact } from '../../redux/contacts/contacts-actions';\r\nimport { deleteContactAsyncThunk } from '../../redux/contacts/contacts-operations';\r\n\r\nexport default function ContactListItem(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { name, number, id } = props;\r\n  return (\r\n    <>\r\n      <span>{name}: </span>\r\n      <span>{number} </span>\r\n      <button\r\n        className=\"button__delete\"\r\n        type=\"button\"\r\n        onClick={() => dispatch(deleteContactAsyncThunk(id))}\r\n      >\r\n        delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n}","const getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizeFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizeFilter)\r\n  );\r\n};\r\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport \"./ContactList.scss\";\nimport ContactListItem from \"./ContactListItem\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selector\";\nimport {fetchContactsAsyncThunk} from \"../../redux/contacts/contacts-operations\";\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getVisibleContacts);\n  useEffect(() => {\n    dispatch(fetchContactsAsyncThunk())\n  }, [dispatch])\n  return (\n    <>\n      {\" \"}\n      {contacts.length > 0 && (\n        <ul className=\"Contact__list\">\n          {contacts.map(({ id, name, Phone }) => {\n            return (\n              <li key={id} className=\"Contact__item\">\n                <ContactListItem name={name} number={Phone} id={id} />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\nexport default ContactList;\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { DELETECONTACT, FILTER } from \"./contacts-types\"\r\n\r\n//pending, fullfilled, rejected\r\n// export const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\n// export const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n// export const addContact = createAction(\r\n//   ADDCONTACT,\r\n//   ({ name, number }) => {\r\n//     return {\r\n//       payload: {\r\n//         name,\r\n//         number,\r\n//       },\r\n//     };\r\n//   }\r\n// );\r\n\r\nexport const deleteContact = createAction(DELETECONTACT);\r\nexport const handleFilterChange = createAction(FILTER);\r\n","const ADDCONTACT = \"contact/addContact\";\r\nconst DELETECONTACT = \"contact/deleteContact\";\r\nconst FILTER = \"contact/filter\";\r\n\r\nexport {ADDCONTACT, DELETECONTACT, FILTER}","import { useSelector, useDispatch } from \"react-redux\";\nimport { handleFilterChange } from \"../../redux/contacts/contacts-actions\";\n\nconst Filter = () => {\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"label\">\n      Find contacts by name\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(handleFilterChange(e.target.value))}\n        placeholder=\"Enter search name\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\n","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      {children}\n    </div>\n  );\n}\n","import ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport Container from \"./components/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter/>\r\n      <ContactList/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import { fetchContactsSuccess, fetchContactsError, fetchContactsRequest } from \"./contacts-actions\";\r\nimport { handleFilterChange } from \"./contacts-actions\";\r\nimport { fetchContactsAsyncThunk, addContactAsyncThunk, deleteContactAsyncThunk } from \"./contacts-operations\";\r\n\r\n\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [fetchContactsAsyncThunk.fulfilled]: (_, action) => {\r\n        return action.payload\r\n    },\r\n    [addContactAsyncThunk.fulfilled]: (state, action) => {\r\n        return [action.payload ,...state]\r\n    },\r\n    [deleteContactAsyncThunk.fulfilled]: (state, action) => {\r\n        return state = state.filter((item) => item.id !== action.payload)\r\n    },\r\n    // [addContactAsyncThunk.fulfilled]: \r\n    // [addContact]: (state, { payload }) => {\r\n    //     if (state.some((e) => e.name.includes(payload.name))) {\r\n    //     alert(`${payload.name} is already in contacts`);\r\n    //     return state;\r\n    //     }\r\n    //     return [payload, ...state];\r\n    // },\r\n    // [deleteContact]: (state, { payload }) => {\r\n    //     state = state.filter((item) => item.id !== payload);\r\n    //     return state\r\n    // }\r\n})\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n    [handleFilterChange]: (_, { payload }) => {\r\n        return payload;\r\n    }\r\n})\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n})\r\n\r\n// const itemsReducerSlice = createSlice({\r\n//     name: \"contacts\",\r\n//     initialState: {\r\n//         item: [],\r\n//         filter: \"\",\r\n//         extraReducers: {\r\n//             [fetchContactsAsyncThunk.fulfilled]: (state, action) => {\r\n//                 return {\r\n//                     ...state,\r\n//                     items: action.payload,\r\n//                 };\r\n//             },\r\n//         },\r\n\r\n//     }\r\n// })","import contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport { store };\r\n\r\n// import {\r\n//   persistStore,\r\n//   persistReducer,\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from \"redux-persist\";\r\n// import logger from 'redux-logger'\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\n// const persistConfig = {\r\n//   key: \"contacts\",\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\n// const store = configureStore({\r\n//   reducer: {\r\n//   contacts: persistReducer(persistConfig, contactsReducer)\r\n// },\r\n//   devTools: process.env.NODE_ENV === \"development\",\r\n//   middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }).concat(logger)\r\n// });\r\n\r\n// const persistor = persistStore(store);\r\n\r\n\r\n// export { store, persistor };\r\n","import reactDom from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {store} from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"modern-normalize/modern-normalize.css\";\r\n// import { PersistGate } from 'redux-persist/integration/react'\r\n\r\nreactDom.render(\r\n  <Provider store={store}>\r\n    {/* <PersistGate loading={null} persistor={persistor}> */}\r\n    <App />\r\n    {/* </PersistGate> */}\r\n </Provider >\r\n  ,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}